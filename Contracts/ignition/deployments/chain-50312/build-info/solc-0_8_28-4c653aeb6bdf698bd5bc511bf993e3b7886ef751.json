{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-4c653aeb6bdf698bd5bc511bf993e3b7886ef751",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/InteractionTracker.sol": "project/contracts/InteractionTracker.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/InteractionTracker.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./NPCCore.sol\";\nimport \"./LearningEngine.sol\";\nimport \"./SharedTypes.sol\";\nimport \"./QuestSystem.sol\";\n\ncontract InteractionTracker {\n    NPCCore public immutable npcCore;\n    LearningEngine public immutable learningEngine;\n    QuestSystem public questSystem;\n\n    /**\n     * @dev Emitted after a successful interaction, providing a summary for off-chain indexers.\n     * This is the ONLY source of historical data, making the system scalable.\n     */\n    event NPCInteraction(\n        uint256 indexed npcId,\n        address indexed player,\n        SharedTypes.ActionType action,\n        bool wasPositive\n    );\n\n    /**\n     * @param _npcCoreAddress The deployed address of the NPCCore contract.\n     * @param _learningEngineAddress The deployed address of the LearningEngine contract.\n     */\n    constructor(address _npcCoreAddress, address _learningEngineAddress) {\n        npcCore = NPCCore(_npcCoreAddress);\n        learningEngine = LearningEngine(_learningEngineAddress);\n    }\n\n    function setQuestSystemAddress(address _questSystemAddress) external {\n        require(msg.sender == npcCore.owner(), \"Only owner can set quest system\");\n        questSystem = QuestSystem(_questSystemAddress);\n    }\n\n    /**\n     * @notice The main function for a player to interact with an NPC.\n     * @param npcId The ID of the NPC being interacted with.\n     * @param context A struct containing all the details of the player's action.\n     */\n    function interact(uint256 npcId, SharedTypes.InteractionContext calldata context) external {\n        require(npcCore.getNPCState(npcId).isActive, \"NPC is not active\");\n        require(msg.sender != address(0), \"Invalid player address\");\n        require(npcId < npcCore.getNPCCount(), \"Invalid NPC ID\");\n        \n        // First, ask the LearningEngine to determine the nature of the interaction.\n        bool isPositive = learningEngine.isInteractionPositive(context);\n\n        // Step 1: CALCULATE the outcome.\n        // This is a view call to the LearningEngine, which returns the calculated changes.\n        NPCCore.InteractionOutcome memory outcome = learningEngine.calculateInteractionOutcome(\n            npcId,\n            msg.sender, // The player is always the message sender.\n            context,\n            isPositive\n        );\n\n        // Step 2: APPLY the outcome.\n        // This is the single, state-changing call to NPCCore that updates everything at once.\n        npcCore.applyInteractionOutcome(npcId, msg.sender, outcome);\n\n        // Step 3: UPDATE QUEST PROGRESS IF QUEST SYSTEM IS SET\n        if (address(questSystem) != address(0)) {\n            // Update quest progress based on the interaction\n            // Different actions contribute differently to quests\n            uint256 progressIncrement = 1;\n            if (context.action == SharedTypes.ActionType.Help) {\n                progressIncrement = 5;\n            } else if (context.action == SharedTypes.ActionType.Trade) {\n                progressIncrement = 3;\n            } else if (context.action == SharedTypes.ActionType.Attack) {\n                // Attacking might negatively impact quest progress for certain quest types\n                progressIncrement = 0; // No progress on positive quests\n            } else if (context.action == SharedTypes.ActionType.Greet) {\n                progressIncrement = 1;\n            }\n            \n            // Update any active quests related to this NPC\n            questSystem.updateQuestProgress(msg.sender, npcId, progressIncrement);\n        }\n\n        // Step 4: EMIT the event.\n        // Log the interaction for frontends and data analytics services to consume.\n        emit NPCInteraction(npcId, msg.sender, context.action, isPositive);\n    }\n\n    /**\n     * @notice Helper function to check if an interaction would be valid without executing it\n     * @param npcId The ID of the NPC to check\n     * @return bool Whether the NPC is active and can be interacted with\n     */\n    function canInteractWith(uint256 npcId) external view returns (bool) {\n        try npcCore.getNPCState(npcId) returns (NPCCore.NPC memory npc) {\n            return npc.isActive;\n        } catch {\n            return false;\n        }\n    }\n}"
      },
      "project/contracts/LearningEngine.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./NPCCore.sol\";\nimport \"./SharedTypes.sol\";\n\ncontract LearningEngine {\n    NPCCore public immutable npcCore;\n\n    struct Decision {\n        SharedTypes.ResponseType responseType;   // Greet, Trade, Attack, Flee, Help, Ignore \n        uint16 intensity;     // 0–1000\n        string contextData;\n    }\n\n    constructor(address _npcCoreAddress) {\n        npcCore = NPCCore(_npcCoreAddress);\n    }\n\n    function makeDecision(\n        uint256 npcId,\n        address player,\n        SharedTypes.ActionType actionType,\n        uint256 /*contextValue*/ // reserved for future use (e.g., time, location)\n    ) external view returns (Decision memory) {\n        NPCCore.NPC memory npc = npcCore.getNPCState(npcId);\n        uint16 relationship = npcCore.getRelationship(npcId, player);\n\n        // Base response logic\n        SharedTypes.ResponseType responseType;\n        uint16 intensity = 500; // default\n        string memory contextData = \"\";\n\n        // Enhanced decision-making algorithm considering personality, relationship, and action type\n        if (actionType == SharedTypes.ActionType.Attack) {\n            // If attacked, respond with attack, flee, or ignore depending on relative strength\n            if (npc.aggression > 700) {\n                responseType = SharedTypes.ResponseType.Attack;\n                intensity = uint16(npc.aggression / 2 + relationship / 3);\n                contextData = \"defensive_response\";\n            } else if (npc.aggression < 300) {\n                responseType = SharedTypes.ResponseType.Flee;\n                intensity = uint16(500 + (1000 - npc.aggression) / 3);\n                contextData = \"retreat\";\n            } else {\n                // Moderate aggression NPCs might ignore or respond minimally\n                responseType = SharedTypes.ResponseType.Ignore;\n                intensity = uint16(200 + relationship / 4);\n                contextData = \"cautious_ignore\";\n            }\n        } else if (actionType == SharedTypes.ActionType.Help || actionType == SharedTypes.ActionType.Give) {\n            // Positive actions elicit positive responses from most NPCs\n            if (npc.sociability > 700) {\n                responseType = SharedTypes.ResponseType.Help;\n                intensity = uint16(relationship / 2 + npc.sociability / 3);\n                contextData = \"grateful_assistance\";\n            } else if (npc.personality == 0) { // Friendly personality\n                responseType = SharedTypes.ResponseType.Greet;\n                intensity = uint16(relationship / 2 + 200);\n                contextData = \"friendly_greeting\";\n            } else if (npc.sociability > 400) {\n                responseType = SharedTypes.ResponseType.Greet;\n                intensity = uint16(relationship / 3 + 150);\n                contextData = \"polite_greeting\";\n            } else {\n                // Less social NPCs may still acknowledge help but with lower intensity\n                responseType = SharedTypes.ResponseType.Ignore;\n                intensity = uint16(relationship / 4 + 100);\n                contextData = \"reserved_acknowledgment\";\n            }\n        } else if (actionType == SharedTypes.ActionType.Trade) {\n            // Trading behavior depends on intelligence and sociability\n            if (npc.sociability > 500 && npc.intelligence > 500) {\n                responseType = SharedTypes.ResponseType.Trade;\n                intensity = uint16((npc.sociability + npc.intelligence) / 3);\n                contextData = \"favorable_terms\";\n            } else if (relationship > 500) {\n                responseType = SharedTypes.ResponseType.Trade;\n                intensity = uint16(relationship / 3 + 100);\n                contextData = \"trusted_trade\";\n            } else {\n                // Low relationship, low social NPCs may be reluctant to trade\n                responseType = SharedTypes.ResponseType.Ignore;\n                intensity = uint16(relationship / 5 + 50);\n                contextData = \"hesitant_trade\";\n            }\n        } else if (actionType == SharedTypes.ActionType.Greet) {\n            // Greeting responses vary by personality and sociability\n            if (npc.sociability > 700) {\n                responseType = SharedTypes.ResponseType.Greet;\n                intensity = uint16(relationship / 2 + npc.sociability / 4);\n                contextData = \"warm_greeting\";\n            } else if (npc.personality == 0 && relationship > 300) { // Friendly + positive relationship\n                responseType = SharedTypes.ResponseType.Greet;\n                intensity = uint16(relationship / 2 + 100);\n                contextData = \"friendly_greeting\";\n            } else if (npc.personality == 1 && relationship > 600) { // Neutral + good relationship\n                responseType = SharedTypes.ResponseType.Greet;\n                intensity = uint16(relationship / 3 + 50);\n                contextData = \"respectful_greeting\";\n            } else {\n                responseType = SharedTypes.ResponseType.Ignore;\n                intensity = uint16(relationship / 4 + 50);\n                contextData = \"distant_acknowledgment\";\n            }\n        } else if (actionType == SharedTypes.ActionType.Quest) {\n            // Quest-related interactions depend on faction and relationship\n            if (npc.faction == NPCCore.Faction.ELDER || npc.faction == NPCCore.Faction.VILLAGER) {\n                if (relationship > 400) {\n                    responseType = SharedTypes.ResponseType.Help;\n                    intensity = uint16(relationship / 2 + 100);\n                    contextData = \"quest_assistance\";\n                } else {\n                    responseType = SharedTypes.ResponseType.Ignore;\n                    intensity = uint16(relationship / 4 + 50);\n                    contextData = \"reluctant_help\";\n                }\n            } else if (npc.faction == NPCCore.Faction.MERCHANT) {\n                if (npc.sociability > 400) {\n                    responseType = SharedTypes.ResponseType.Greet;\n                    intensity = uint16(npc.sociability / 3 + 50);\n                    contextData = \"business_greeting\";\n                } else {\n                    responseType = SharedTypes.ResponseType.Ignore;\n                    intensity = uint16(relationship / 4 + 30);\n                    contextData = \"business_hesitant\";\n                }\n            } else {\n                // Guard or other factions\n                responseType = SharedTypes.ResponseType.Greet; // At least acknowledge\n                intensity = uint16(relationship / 4 + 75);\n                contextData = \"formal_acknowledgment\";\n            }\n        } else {\n            // Default response for Greet or other action types\n            // Use a more sophisticated algorithm based on personality, relationship, and traits\n            uint16 combinedFactor = uint16(\n                (relationship * 3 + npc.sociability * 2 + npc.intelligence) / 6\n            );\n\n            if (combinedFactor > 700) {\n                responseType = SharedTypes.ResponseType.Greet;\n                intensity = combinedFactor;\n                contextData = \"positive_response\";\n            } else if (combinedFactor > 500) {\n                responseType = SharedTypes.ResponseType.Ignore;\n                intensity = combinedFactor - 200;\n                contextData = \"neutral_response\";\n            } else {\n                // Low combined factor leads to ignore or flee if aggressive\n                if (npc.aggression > 600 && relationship < 300) {\n                    responseType = SharedTypes.ResponseType.Flee;\n                    intensity = uint16(1000 - combinedFactor);\n                    contextData = \"avoid_response\";\n                } else {\n                    responseType = SharedTypes.ResponseType.Ignore;\n                    intensity = combinedFactor / 2;\n                    contextData = \"indifferent_response\";\n                }\n            }\n        }\n\n        // Adjust intensity based on NPC's core traits\n        // Use safe math to avoid overflow\n        if (responseType == SharedTypes.ResponseType.Attack && npc.aggression > 500) {\n            // Calculate with safe multiplication\n            uint256 adjustedIntensity = (uint256(intensity) * (1000 + npc.aggression)) / 1000;\n            intensity = uint16(adjustedIntensity > 1000 ? 1000 : adjustedIntensity);\n        } else if (responseType == SharedTypes.ResponseType.Help && npc.sociability > 500) {\n            uint256 adjustedIntensity = (uint256(intensity) * (1000 + npc.sociability)) / 1000;\n            intensity = uint16(adjustedIntensity > 1000 ? 1000 : adjustedIntensity);\n        } else if (responseType == SharedTypes.ResponseType.Flee && (1000 - npc.aggression) > 500) {\n            uint256 adjustedIntensity = (uint256(intensity) * (1500 - npc.aggression)) / 1000;\n            intensity = uint16(adjustedIntensity > 1000 ? 1000 : adjustedIntensity);\n        }\n\n        // Final cap intensity\n        if (intensity > 1000) intensity = 1000;\n        // intensity cannot be negative in current implementation, but keeping for safety\n        if (intensity > type(uint16).max) intensity = type(uint16).max;\n\n        return Decision(responseType, intensity, contextData);\n    }\n\n    function isInteractionPositive(SharedTypes.InteractionContext memory context) public pure returns (bool) { // <-- Use SharedTypes\n        SharedTypes.ActionType action = context.action;\n        if (action == SharedTypes.ActionType.Attack) return false;\n        return true;\n    }\n\n    function calculateInteractionOutcome(\n        uint256 npcId,\n        address player,\n        SharedTypes.InteractionContext memory context, // <-- Use SharedTypes\n        bool wasPositive\n    ) external view returns (NPCCore.InteractionOutcome memory) {\n        NPCCore.NPC memory npc = npcCore.getNPCState(npcId);\n        uint16 relationship = npcCore.getRelationship(npcId, player);\n        uint16 delta = uint16(npc.intelligence / 50) + 5;\n\n        uint16 newRelationship;\n        if (wasPositive) { newRelationship = (relationship + delta > 1000) ? 1000 : relationship + delta; }\n        else { newRelationship = (relationship > delta) ? relationship - delta : 0; }\n\n        uint16 newAggression = npc.aggression;\n        uint16 newSociability = npc.sociability;\n        uint16 newIntelligence = npc.intelligence;  // Start with current intelligence\n        SharedTypes.ActionType action = context.action;\n\n        // Update aggression based on actions\n        if (action == SharedTypes.ActionType.Attack && !wasPositive) { \n            newAggression = (newAggression + delta > 1000) ? 1000 : newAggression + delta; \n        }\n        // Update sociability based on helpful actions\n        else if (action == SharedTypes.ActionType.Help && wasPositive) { \n            newSociability = (newSociability + delta > 1000) ? 1000 : newSociability + delta; \n        }\n        \n        // Update intelligence based on various factors\n        // Intelligence increases with positive learning interactions\n        if ((action == SharedTypes.ActionType.Help || action == SharedTypes.ActionType.Trade || \n             action == SharedTypes.ActionType.Quest) && wasPositive) {\n            // Learning from positive social interactions\n            newIntelligence = (newIntelligence + (delta / 2) > 1000) ? 1000 : newIntelligence + (delta / 2);\n        } else if (action == SharedTypes.ActionType.Attack && !wasPositive) {\n            // Learning from negative experiences (becoming more cautious)\n            newIntelligence = (newIntelligence + (delta / 4) > 1000) ? 1000 : newIntelligence + (delta / 4);\n        }\n\n        string memory memorySnippet = generateMemorySnippet(context);\n\n        return NPCCore.InteractionOutcome({\n            newRelationshipScore: newRelationship,\n            newAggression: newAggression,\n            newSociability: newSociability,\n            newIntelligence: newIntelligence,\n            memorySnippet: memorySnippet\n        });\n    }\n\n    function generateMemorySnippet(SharedTypes.InteractionContext memory context) internal pure returns (string memory) { // <-- Use SharedTypes\n        SharedTypes.ActionType action = context.action;\n        if (action == SharedTypes.ActionType.Attack) { return string.concat(\"attack:dmg:\", uintToString(context.value1)); }\n        if (action == SharedTypes.ActionType.Help) { return \"help:player\"; }\n        if (action == SharedTypes.ActionType.Give) { return string.concat(\"give:item:\", uintToString(context.value1), \":qty:\", uintToString(context.value2)); }\n        return \"greet:player\";\n    }\n\n    function uintToString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) return \"0\";\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) { digits++; temp /= 10; }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) { digits -= 1; buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); value /= 10; }\n        return string(buffer);\n    }\n\n\n}"
      },
      "project/contracts/NPCCore.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract NPCCore is Ownable {\n\n    uint256 private _npcIdCounter;\n    address public learningEngineAddress;\n\n    enum Faction { GUARD, MERCHANT, VILLAGER, ELDER, FARMER }\n\n    struct NPC {\n        uint256 id;\n        string name;\n        uint8 personality;        // 0: Friendly, 1: Neutral, 2: Hostile\n        uint16 intelligence;      // 0–1000\n        uint16 aggression;        // 0–1000\n        uint16 sociability;       // 0–1000\n        uint256 experiencePoints;\n        uint256 lastInteraction;\n        bool isActive;\n        Faction faction;          // NPC's faction\n    }\n\n    // NEW: A struct to bundle all state changes from an interaction.\n    // This is passed from the LearningEngine to this contract.\n    struct InteractionOutcome {\n        uint16 newRelationshipScore;\n        uint16 newAggression;\n        uint16 newSociability;\n        uint16 newIntelligence;\n        string memorySnippet;\n    }\n\n    mapping(uint256 => NPC) public npcs;\n    mapping(uint256 => mapping(address => uint16)) public playerRelationships; // 0–1000 scale\n    mapping(uint256 => string[50]) public npcMemories;\n    mapping(uint256 => uint8) public npcMemoryIndex; \n\n    event NPCCreated(uint256 indexed npcId, string name);\n    event TraitsUpdated(uint256 indexed npcId, uint16 intelligence, uint16 aggression, uint16 sociability);\n    event MemoryRecorded(uint256 indexed npcId, string memorySnippet);\n\n    constructor() Ownable(msg.sender) {} \n\n    modifier onlyActiveNPC(uint256 npcId) {\n        require(npcs[npcId].isActive, \"NPC is not active\");\n        _;\n    }\n\n    modifier onlyLearningEngine() {\n        require(msg.sender == learningEngineAddress, \"Caller is not the LearningEngine\");\n        _;\n    }\n    \n    modifier onlyInteractionTracker() {\n        // We'll add this address during deployment in the tests\n        require(msg.sender == interactionTrackerAddress, \"Caller is not the InteractionTracker\");\n        _;\n    }\n    \n    address public interactionTrackerAddress;\n    \n    function setInteractionTrackerAddress(address _interactionTrackerAddress) onlyOwner external {\n        interactionTrackerAddress = _interactionTrackerAddress;\n    }\n\n    function createNPC(\n        string memory _name,\n        uint8 _personality,\n        uint16 _intelligence,\n        uint16 _aggression,\n        uint16 _sociability,\n        Faction _faction\n    ) onlyOwner external returns (uint256) {\n        uint256 id = _npcIdCounter;\n        require(_intelligence <= 1000 && _aggression <= 1000 && _sociability <= 1000, \"Traits must be 0-1000\");\n        require(_personality <= 2, \"Personality must be 0, 1, or 2\");\n        npcs[id] = NPC({\n            id: id,\n            name: _name,\n            personality: _personality,\n            intelligence: _intelligence,\n            aggression: _aggression,\n            sociability: _sociability,\n            experiencePoints: 0,\n            lastInteraction: block.timestamp,\n            isActive: true,\n            faction: _faction\n        });\n\n        _npcIdCounter++;\n\n        emit NPCCreated(id, _name);\n        return id;\n    }\n\n    // The primary function for applying all state changes at once.\n    // This is called by the InteractionTracker after getting calculations from the LearningEngine.\n    function applyInteractionOutcome(\n        uint256 npcId,\n        address player,\n        InteractionOutcome memory outcome\n    ) external onlyInteractionTracker onlyActiveNPC(npcId) {\n        // 1. Update Relationship\n        playerRelationships[npcId][player] = _clamp(outcome.newRelationshipScore, 0, 1000);\n\n        // 2. Update Traits\n        NPC storage npc = npcs[npcId];\n        npc.intelligence = _clamp(outcome.newIntelligence, 0, 1000);\n        npc.aggression = _clamp(outcome.newAggression, 0, 1000);\n        npc.sociability = _clamp(outcome.newSociability, 0, 1000);\n        npc.lastInteraction = block.timestamp;\n        emit TraitsUpdated(npcId, npc.intelligence, npc.aggression, npc.sociability);\n\n        // 3. Record Contextual Memory using the circular buffer\n        uint8 index = npcMemoryIndex[npcId];\n        npcMemories[npcId][index] = outcome.memorySnippet;\n        npcMemoryIndex[npcId] = (index + 1) % 50;\n        emit MemoryRecorded(npcId, outcome.memorySnippet);\n    }\n\n    function getNPCState(uint256 npcId) external view returns (NPC memory) {\n        return npcs[npcId];\n    }\n\n    function getNPCFaction(uint256 npcId) external view returns (Faction) {\n        return npcs[npcId].faction;\n    }\n/*\n    function updateTraits(\n        uint256 npcId,\n        uint16 newIntelligence,\n        uint16 newAggression,\n        uint16 newSociability\n    ) onlyLearningEngine external onlyActiveNPC(npcId) {\n        NPC storage npc = npcs[npcId];\n        npc.intelligence = _clamp(newIntelligence, 0, 1000);\n        npc.aggression = _clamp(newAggression, 0, 1000);\n        npc.sociability = _clamp(newSociability, 0, 1000);\n        npc.lastInteraction = block.timestamp;\n        emit TraitsUpdated(npcId, npc.intelligence, npc.aggression, npc.sociability);\n    }\n\n    function recordMemory(uint256 npcId, string memory memorySnippet) onlyLearningEngine external onlyActiveNPC(npcId) {\n        uint8 index = npcMemoryIndex[npcId];\n        npcMemories[npcId][index] = memorySnippet;\n        npcMemoryIndex[npcId] = (index + 1) % 50;\n\n        emit MemoryRecorded(npcId, memorySnippet);\n    }\n*/\n    function setRelationship(uint256 npcId, address player, uint16 score) onlyLearningEngine external onlyActiveNPC(npcId) {\n        playerRelationships[npcId][player] = _clamp(score, 0, 1000);\n    }\n\n    function getRelationship(uint256 npcId, address player) external view returns (uint16) {\n        return playerRelationships[npcId][player];\n    }\n\n    function setLearningEngineAddress(address _learningEngineAddress) onlyOwner external {\n        learningEngineAddress = _learningEngineAddress;\n    }\n\n    function getMemories(uint256 npcId) external view returns (string[50] memory) {\n        string[50] memory orderedMemories;\n        uint8 nextSlot = npcMemoryIndex[npcId];\n        uint8 size = 50; // The fixed size of our array\n\n        // We reorder the array for the frontend so the newest memory is last.\n        for (uint8 i = 0; i < size; i++) {\n            orderedMemories[i] = npcMemories[npcId][(nextSlot + i) % size];\n        }\n        return orderedMemories;\n    }\n\n    function getNPCCount() external view returns (uint256) {\n        return _npcIdCounter;\n    }\n\n    function _clamp(uint16 value, uint16 min, uint16 max) private pure returns (uint16) {\n        if (value < min) return min;\n        if (value > max) return max;\n        return value;\n    }\n}"
      },
      "project/contracts/QuestSystem.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./NPCCore.sol\";\nimport \"./SharedTypes.sol\";\n\ncontract QuestSystem {\n    NPCCore public immutable npcCore;\n    address public interactionTrackerAddress;\n\n    enum QuestType { DELIVER_ITEM, DEFEAT_ENEMY, GATHER_INFORMATION, ASSIST_NPC }\n    enum QuestStatus { UNAVAILABLE, AVAILABLE, ACTIVE, COMPLETED, FAILED, CLAIMED }\n\n    struct Quest {\n        uint256 id;\n        uint256 npcId;\n        QuestType questType;\n        string title;\n        string description;\n        uint256 targetValue;\n        uint256 rewardXP;\n        bool isActive;\n        uint16 requiredRelationship; // 0-1000 scale, tied to NPCCore relationship\n    }\n\n    struct PlayerQuest {\n        QuestStatus status;\n        uint256 progress;\n        uint256 acceptedAt;\n    }\n\n    uint256 private _questIdCounter;\n    mapping(uint256 => Quest) public quests;\n    mapping(address => mapping(uint256 => PlayerQuest)) public playerQuests;\n    mapping(address => uint256[]) private _playerActiveQuestIds;\n\n    event QuestCreated(uint256 indexed questId, uint256 npcId, string title);\n    event QuestAccepted(address indexed player, uint256 indexed questId);\n    event QuestProgressUpdated(address indexed player, uint256 indexed questId, uint256 newProgress);\n    event QuestCompleted(address indexed player, uint256 indexed questId);\n    event QuestRewardClaimed(address indexed player, uint256 indexed questId, uint256 rewardXP);\n\n    modifier onlyInteractionTracker() {\n        require(msg.sender == interactionTrackerAddress, \"Only InteractionTracker can call\");\n        _;\n    }\n\n    constructor(address _npcCoreAddress) {\n        npcCore = NPCCore(_npcCoreAddress);\n    }\n\n    function setInteractionTrackerAddress(address _address) external {\n        require(msg.sender == npcCore.owner(), \"Only owner can set addresses\");\n        interactionTrackerAddress = _address;\n    }\n\n    function createQuest(\n        uint256 npcId,\n        QuestType questType,\n        string memory title,\n        string memory description,\n        uint256 targetValue,\n        uint256 rewardXP,\n        uint16 requiredRelationship\n    ) external returns (uint256) {\n        require(msg.sender == npcCore.owner(), \"Only owner can create quests\");\n        uint256 questId = _questIdCounter++;\n        quests[questId] = Quest({\n            id: questId,\n            npcId: npcId,\n            questType: questType,\n            title: title,\n            description: description,\n            targetValue: targetValue,\n            rewardXP: rewardXP,\n            isActive: true,\n            requiredRelationship: requiredRelationship\n        });\n        emit QuestCreated(questId, npcId, title);\n        return questId;\n    }\n\n    function acceptQuest(uint256 questId) external {\n        Quest storage quest = quests[questId];\n        require(quest.isActive, \"Quest is not active\");\n        require(playerQuests[msg.sender][questId].status == QuestStatus.UNAVAILABLE, \"Quest already actioned\");\n        \n        uint16 relationship = npcCore.getRelationship(quest.npcId, msg.sender);\n        require(relationship >= quest.requiredRelationship, \"Insufficient relationship\");\n\n        playerQuests[msg.sender][questId] = PlayerQuest({\n            status: QuestStatus.ACTIVE,\n            progress: 0,\n            acceptedAt: block.timestamp\n        });\n        _playerActiveQuestIds[msg.sender].push(questId);\n\n        emit QuestAccepted(msg.sender, questId);\n    }\n\n    function updateQuestProgress(address player, uint256 npcId, uint256 progressIncrement) external onlyInteractionTracker {\n        uint256[] storage activeQuests = _playerActiveQuestIds[player];\n        for (uint i = 0; i < activeQuests.length; i++) {\n            uint256 questId = activeQuests[i];\n            Quest storage quest = quests[questId];\n            PlayerQuest storage playerQuest = playerQuests[player][questId];\n\n            if (quest.npcId == npcId && playerQuest.status == QuestStatus.ACTIVE) {\n                uint256 newProgress = playerQuest.progress + progressIncrement;\n                playerQuest.progress = newProgress > quest.targetValue ? quest.targetValue : newProgress;\n\n                emit QuestProgressUpdated(player, questId, playerQuest.progress);\n\n                if (playerQuest.progress >= quest.targetValue) {\n                    _completeQuest(player, questId, i);\n                }\n            }\n        }\n    }\n\n    function _completeQuest(address player, uint256 questId, uint questIndexInActiveList) internal {\n        PlayerQuest storage playerQuest = playerQuests[player][questId];\n        require(playerQuest.status == QuestStatus.ACTIVE, \"Quest not active\");\n\n        playerQuest.status = QuestStatus.COMPLETED;\n        _removeQuestFromActiveList(player, questIndexInActiveList);\n\n        emit QuestCompleted(player, questId);\n    }\n\n    function claimReward(uint256 questId) external {\n        PlayerQuest storage playerQuest = playerQuests[msg.sender][questId];\n        require(playerQuest.status == QuestStatus.COMPLETED, \"Quest not completed\");\n        \n        playerQuest.status = QuestStatus.CLAIMED;\n        Quest memory quest = quests[questId];\n        \n        // Here you would add logic to grant XP to the player via another contract.\n        // For now, we emit the event.\n        emit QuestRewardClaimed(msg.sender, questId, quest.rewardXP);\n    }\n    \n    // Efficiently removes a quest from a player's active list using the swap-and-pop method.\n    function _removeQuestFromActiveList(address player, uint index) private {\n        uint256[] storage activeQuests = _playerActiveQuestIds[player];\n        activeQuests[index] = activeQuests[activeQuests.length - 1];\n        activeQuests.pop();\n    }\n\n    // --- View Functions ---\n    function getPlayerQuestStatus(address player, uint256 questId) external view returns (PlayerQuest memory) {\n        return playerQuests[player][questId];\n    }\n    \n    function getPlayerActiveQuests(address player) external view returns (uint256[] memory) {\n        return _playerActiveQuestIds[player];\n    }\n}"
      },
      "project/contracts/SharedTypes.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title SharedTypes\n * @notice A central contract to hold enums and structs used across multiple contracts.\n * This prevents circular dependencies.\n */\ncontract SharedTypes {\n    // Enum for readable, explicit action types.\n    enum ActionType { Greet, Trade, Attack, Help, Give, Quest }\n\n    enum ResponseType { Greet, Trade, Attack, Flee, Help, Ignore }\n\n    /**\n     * @dev A structured data packet describing a player's action.\n     * This is created by the frontend and passed into the `interact` function.\n     */\n    struct InteractionContext {\n        ActionType action;      // The verb: What did the player do?\n        address target;         // The direct object: Who/what was the action for?\n        uint256 value1;         // Contextual data 1 (e.g., item ID, damage amount)\n        uint256 value2;         // Contextual data 2 (e.g., item quantity, gold amount)\n        bytes32 memo;           // A short, gas-efficient memo for identifiers (e.g., quest ID)\n    }\n}"
      }
    }
  }
}